*Deixando automático o build
    em um terminal rodar (tsc -w) para colocar o typescript em watch.. compilando sempre
    outro terminal com (nodemon dist/main.js)

*Arquivo de configuração do tsc (tsconfig.json) apontando para ES6 e pasta output dist/main.js

*Instalar o typescript
    npm i typescript -g
    tsc -w (para usar)

*Arquivo types com dicas sobre metodos
    npm i @types/restify

*Classe abstract define um template para quem herdar (terao que usar mesma estrutura)

*Método static nao preciso estanciar uma classe para usar (nao preciso usar o New User())

*Start do mongodb
    ./mongod --dbpath=../../data/db    (criou uma pasta data/db na mesma pasta dos arquivos do mongo; Porta 27017)
    ./mongo (para conectar no banco)

*Mongo estrutura de Documentos
    Chave -> Valor; Chaves nao case-sensitive; Chaves nao podem ser duplicadas
    Coleção são conjutos de documentos; 
    Documentos podem ser dinamicos (variar - chaves diferentes) dentro da mesma colecao
    Todo objeto possui um _id (identifica ele unicamnete dentro de uma colecao; Hexa-decimal de 12 bytes)
    _id (12 bytes -> timestamp(4) idenficador_maquina(3) idenficador_processo(2) incremento(3))

*Mongo commands
    use nome_banco  (seleciona um banco; cria caso nao exista)
    db              (mostra qual banco está selecionado)
    var peter = {name: 'Peter', email: 'peter@marvel.com'}
    db.heroes.insert(peter)     (insere na colecao; cria caso nao exista)
    db.heroes.find()            (lista todos os documentos)
    ObjectId()                  (gera um id unico)
    db.heroes.find(_id: id)
    db.heroes.find({name: 'Peter'})
    db.heroes.findOne()         (retorna o primeiro objeto que ele encontrar)
    var peter = db.heroes.findOne()
        peter.name = 'Peter Parker'
        peter.age = 22
    db.heroes.update({_id: peter._id}, peter)   (irá atualizar o documento. Vai substituir o mesmo completamente)
    db.heroes.update({_id: peter._id}, {'$set': {name: 'Peter Apenas'}})     (irá atualizar apenas oq eu determinar)
    db.heroes.remove({_id: peter._id})

*Robo 3T - Ferramenta visual para manipular documentos do mongodb
    buscar documentos; atualizar; inserir; (de uma maneira muito fácil)

*JSONView - extensao no chrome pra ver JSON de forma mais elegante

*Restlet Client - opcao ao POSTMAN que roda no chrome (https://chrome.google.com/webstore/detail/restlet-client-rest-api-t/aejoelaoggembcahagimdiliamlcdmfm)


